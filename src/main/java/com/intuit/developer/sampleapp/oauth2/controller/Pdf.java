package com.intuit.developer.sampleapp.oauth2.controller;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.util.List;

public class Pdf {

    /*
     * USING THE PDF CLASS
     *
     * 1.create an instance
     * 		Pdf p=new Pdf();
     * 2.path of pdf to be saved with file name and extension
     * 		p.FILE="d:/abc.pdf";
     * 3.content to be written on the pdf
     * 		p.Writer("hello world");
     */


    public static String FILE = "";


    //		FONTS
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);



    public void Writer(String msg) {

        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();

            Paragraph preface = new Paragraph();

            preface.add(new Paragraph(""+msg,smallBold));

            document.add(preface);

            // addTitlePage(document);

            //  UNCOMMENT TO ADD ANY META DATA
            //addMetaData(document);


            //  UNCOMMENT TO ADD CONTENT TABLE
            //addContent(document);

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*    POSTION SETTINGS
     * try { Document document = new Document(); PdfWriter.getInstance(document, new
     * FileOutputStream(FILE)); document.open(); // Left Paragraph paragraph = new
     * Paragraph("This is right aligned text");
     * paragraph.setAlignment(Element.ALIGN_RIGHT); document.add(paragraph); //
     * Centered paragraph = new Paragraph("This is centered text");
     * paragraph.setAlignment(Element.ALIGN_CENTER); document.add(paragraph); //
     * Left paragraph = new Paragraph("This is left aligned text");
     * paragraph.setAlignment(Element.ALIGN_LEFT); document.add(paragraph); // Left
     * with indentation paragraph = new Paragraph(
     * "This is left aligned text with indentation");
     * paragraph.setAlignment(Element.ALIGN_LEFT); paragraph.setIndentationLeft(50);
     * document.add(paragraph);
     *
     * document.close(); } catch (Exception e) { e.printStackTrace(); }
     */


    /*             PDF READER
     * private static String INPUTFILE = "c:/temp/FirstPdf.pdf";
     * private static String OUTPUTFILE = "c:/temp/ReadPdf.pdf";
     *
     * public static void main(String[] args) throws DocumentException, IOException
     * { Document document = new Document();
     *
     * PdfWriter writer = PdfWriter
     * .getInstance(document, new FileOutputStream(OUTPUTFILE));
     *  document.open();
     *  PdfReader reader = new PdfReader(INPUTFILE);
     *  int n = reader.getNumberOfPages();
     *  PdfImportedPage page;
     *  // Go through all pages
     *  for (int i = 1; i <= n; i++) {
     *  // only page
     * number 2 will be included
     * if (i == 2) {
     * page = writer.getImportedPage(reader,i);
     * Image instance = Image.getInstance(page);
     * document.add(instance);
     * }
     * }
     * document.close();
     * }
     */


    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();

        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));

        document.add(preface);

        // GOTO A NEW PAGE
        //document.newPage();

        // ADD A NEW LINE
        //  addEmptyLine(preface, 1);

        // ADDS HEADER TO THE FILE
        //preface.add(new Paragraph("Title of the document", catFont));

        // Will create: Report generated by: _name, _date
        //   preface.add(new Paragraph(
        //          "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        //          smallBold));


        //WILL ADD RED HIGHLIGHT
        // preface.add(new Paragraph(
        //    "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
        //     redFont));
    }

    private static void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
    //    createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private static void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

//    private static void createList(Section subCatPart) {
//        List list = new List(true, false, 10);
//        list.add(new ListItem("First point"));
//        list.add(new ListItem("Second point"));
//        list.add(new ListItem("Third point"));
//        subCatPart.add(list);
//    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}